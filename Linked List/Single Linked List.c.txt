#include<stdlib.h>
#include <stdio.h>
     
void create();
void display();
int length();
void insert_begin();
void insert_end();
void insert_loc();
void delete_begin();
void delete_end();
void delete_pos();
 
 
struct node
{
    int data;
    struct node *link;
};
struct node *root=NULL;
int main()     
{
        int choice;
        while(1){
               
                printf("The Operations in Linked List are:");
                printf("\n  1.Display");
                printf("\n  2.Insert at the beginning");
                printf("\n  3.Insert at the end");
                printf("\n  4.Insert at specified position");
                printf("\n  5.Delete from beginning");
                printf("\n  6.Delete from the end");
                printf("\n  7.Delete from specified position");
                printf("\n  8.Exit");
                printf("\n --------------------------------------\n");
                printf("Enter your choice:");
                scanf("%d",&choice);
                switch(choice)
                {
                        case 1:
                                        display();
                                        break;
                        case 2: 
                                        insert_begin();
                                        break;
                        case 3:
                                        insert_end();
                                        break;
                        case 4:
                                        insert_loc();
                                        break;
                        case 5:
                                        delete_begin();
                                        break;
                        case 6:
                                        delete_end();
                                        break;
                        case 7:
                                        delete_pos();
                                        break;
                        
                        case 8:
                                        exit(0);
                                        break;
                             
                        default:
                                        printf("\n  Invalid Data:\n");
                                        break;
                }
        }
        return 0;
}

void display()
{
        struct node *p;
        if(root==NULL)
        {
                printf("\n The Linked List is empty!!\n");
                return;
        }
        else
        {
                p=root;
                printf("\n The List elements are: ");
                while(p!=NULL)
                {
                        printf("%dt",p->data);
                        p=p->link ;
                }
        }
}
void insert_begin()
{
        struct node *temp;
        temp=(struct node *)malloc(sizeof(struct node));
        printf("\n Enter the data value for the node: ");
        scanf("%d",&temp->data);
        temp->link =NULL;
        if(root==NULL)
        {
                root=temp;
        }
        else
        {
                temp->link=root;
                root=temp;
        }
}
void insert_end()
{
        struct node *temp,*p;
        temp=(struct node *)malloc(sizeof(struct node));
        printf("\n Enter the data value for the node: ");
        scanf("%d",&temp->data );
        temp->link =NULL;
        if(root==NULL)
        {
                root=temp;
        }
        else
        {
                p=root;
                while(p->link !=NULL)
                {
                        p=p->link ;
                }
                p->link =temp;
        }
}

int length()
{
    int count = 0;
    struct node *temp = root;
    while(temp != NULL)
    {
        count++;
        temp = temp -> link;
    }
    return count;
}

void insert_loc()
{
        struct node *p,*temp;
        int loc, len, i=1;
        printf("\n Enter the position for the new node to be inserted: ");
        scanf("%d",&loc);
        len = length();
        
        if(loc > len)
        {
                printf("\n Invalid location");
        }
        else
        {
                p = root;
                while(i < loc)
                {
                    p = p -> link;
                    i++;
                }
        }
    
        temp=(struct node *)malloc(sizeof(struct node));
        
        printf("\n Enter the data value of the node: ");
        scanf("%d",&temp->data) ;
  
        temp->link=NULL;
        temp->link = p -> link;
        p -> link = temp;
        
}
void delete_begin()
{
        struct node *p;
        if(p==NULL)
        {
                printf("\n List is Empty");
                return;
        }
        else
        {
                p=root;
                root=root->link ;
                printf("\n The deleted element is :%d\t",p->data);
                free(p);
        }
}
void delete_end()
{
        struct node *temp,*p;
        if(root==NULL)
        {
                printf("\n List is Empty:");
                exit(0);
        }
        else if(root->link ==NULL)
        {
                p=root;
                root=NULL;
                printf("\n The deleted element is:%d\t",p->data);
                free(p);
        }
        else
        {
                p=root;
                while(p->link!=NULL)
                {
                        temp=p;
                        p=p->link;
                }
                temp->link=NULL;
                printf("\n The deleted element is:%d\t",p->data);
                free(p);
        }
}
void delete_pos()
{
        
        struct node *temp;
        int loc, len;
        printf("\n Enter the position of the node to be deleted: ");
        scanf("%d",&loc);
        len = length();
        
        if(loc > len)
        {
                printf("\n Invalid location");
        }
        else if (loc == 1){
            temp = root;
            root = temp -> link;
            temp -> link = NULL;
            free(temp);
        }
        else{
            struct node *p=root, *q;
            int i=1;
            while(i<loc-1){
                p = p -> link;
                i++;
            }
            
            q = p -> link;
            p -> link = q -> link;
            q -> link = NULL;
            free(q);
        }
}