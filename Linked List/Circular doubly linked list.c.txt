#include<stdio.h>  
#include<stdlib.h>  
struct node  
{  
    struct node *left;  
    struct node *right;  
    int data;  
};  
struct node *root;  
void insertion_beginning();  
void insertion_last();  
void deletion_beginning();  
void deletion_last();  
void display();  
void search();  
void main ()  
{  
int choice =0;  
    while(choice != 9)  
    {  
        printf("\nThe Operations in the circular doubly linked list are: \n");  
        printf("\nChoose one option from the following list ...\n");  
        printf("\n===============================================\n");  
        printf("\n1.Insert in Beginning\n2.Insert at last\n3.Delete from Beginning\n4.Delete from last\n5.Search\n6.Show\n7.Exit\n");  
        printf("\nEnter your choice?\n");  
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
                    insertion_beginning();  
                    break;  
            case 2:  
                    insertion_last();  
                    break;  
            case 3:  
                    deletion_beginning();  
                    break;  
            case 4:  
                    deletion_last();  
                    break;  
            case 5:  
                    search();  
                    break;  
            case 6:  
                    display();  
                    break;  
            case 7:  
                    exit(0);  
                    break;  
            default:  
                    printf("Please enter valid choice..");  
        }  
    }  
}  
void insertion_beginning()  
{  
   struct node *ptr,*temp;   
   int item;  
   ptr = (struct node *)malloc(sizeof(struct node));  
   if(ptr == NULL)  
   {  
       printf("\nOVERFLOW");  
   }  
   else  
   {  
    printf("\nEnter Item value");  
    scanf("%d",&item);  
    ptr->data=item;  
   if(root==NULL)  
   {  
      root = ptr;  
      ptr -> right = root;   
      ptr -> left = root;   
   }  
   else   
   {  
       temp = root;   
    while(temp -> right != root)  
    {  
        temp = temp -> right;   
    }  
    temp -> right = ptr;  
    ptr -> left = temp;  
    root -> left = ptr;  
    ptr -> right = root;  
    root = ptr;  
   }  
   printf("\nNode inserted\n");  
}  
     
}  
void insertion_last()  
{  
   struct node *ptr,*temp;  
   int item;  
   ptr = (struct node *) malloc(sizeof(struct node));  
   if(ptr == NULL)  
   {  
       printf("\nOVERFLOW");  
   }  
   else  
   {  
       printf("\nEnter value");  
       scanf("%d",&item);  
        ptr->data=item;  
       if(root == NULL)  
       {  
           root = ptr;  
           ptr -> right = root;   
           ptr -> left = root;   
       }  
       else  
       {  
          temp = root;  
          while(temp->right !=root)  
          {  
              temp = temp->right;  
          }  
          temp->right = ptr;  
          ptr ->left=temp;  
          root -> left = ptr;  
      ptr -> right = root;  
        }  
   }  
     printf("\nnode inserted\n");  
}  
  
void deletion_beginning()  
{  
    struct node *temp;  
    if(root == NULL)  
    {  
        printf("\n UNDERFLOW");  
    }  
    else if(root->right == root)  
    {  
        root = NULL;   
        free(root);  
        printf("\nnode deleted\n");  
    }  
    else  
    {  
        temp = root;   
        while(temp -> right != root)  
        {  
            temp = temp -> right;  
        }  
        temp -> right = root -> right;  
        root -> right -> left = temp;  
        free(root);  
        root = temp -> right;  
    }  
  
}  
void deletion_last()  
{  
    struct node *ptr;  
    if(root == NULL)  
    {  
        printf("\n UNDERFLOW");  
    }  
    else if(root->right == root)  
    {  
        root = NULL;   
        free(root);   
        printf("\nnode deleted\n");  
    }  
    else   
    {  
        ptr = root;   
        if(ptr->right != root)  
        {  
            ptr = ptr -> right;   
        }  
        ptr -> left -> right = root;  
        root -> left = ptr -> left;    
        free(ptr);  
        printf("\nnode deleted\n");  
    }  
}  
  
void display()  
{  
    struct node *ptr;  
    ptr=root;  
    if(root == NULL)  
    {  
        printf("\nnothing to print");  
    }     
    else  
    {  
        printf("\n printing values ... \n");  
          
        while(ptr -> right != root)  
        {  
          
            printf("%d\n", ptr -> data);  
            ptr = ptr -> right;  
        }  
        printf("%d\n", ptr -> data);  
    }  
              
}  
  
void search()  
{  
    struct node *ptr;  
    int item,i=0,flag=1;  
    ptr = root;   
    if(ptr == NULL)  
    {  
        printf("\nEmpty List\n");  
    }  
    else  
    {   
        printf("\nEnter item which you want to search?\n");   
        scanf("%d",&item);  
        if(root ->data == item)  
        {  
        printf("item found at location %d",i+1);  
        flag=0;  
        }  
        else   
        {  
        while (ptr->right != root)  
        {  
            if(ptr->data == item)  
            {  
                printf("item found at location %d ",i+1);  
                flag=0;  
                break;  
            }   
            else  
            {  
                flag=1;  
            }  
            i++;  
            ptr = ptr -> right;  
        }  
        }  
        if(flag != 0)  
        {  
            printf("Item not found\n");  
        }  
    }     
          
}